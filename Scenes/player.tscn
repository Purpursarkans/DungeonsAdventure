[gd_scene load_steps=6 format=3 uid="uid://d03hsg8swu0rm"]

[sub_resource type="GDScript" id="GDScript_n2jod"]
resource_name = "Player"
script/source = "extends CharacterBody3D

const mix_view = -PI/2
const max_view = PI/2

var rot_x = 0
var rot_y = 0
var GUIVISIBLE : bool = true

var tempFloor
var tempFloor2

const JUMP_VELOCITY = 6

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

func _ready():
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	$MultiplayerSynchronizer.set_multiplayer_authority(str(name).to_int())
	if $MultiplayerSynchronizer.get_multiplayer_authority() == multiplayer.get_unique_id():
		$Head/Camera3D.make_current()

var action_object = null

func action():
	print_debug($Head/RayCast3D.get_collider())
	action_object = $Head/RayCast3D.get_collider()
	if action_object != null:
		print_debug(action_object.name,\" Click\")
		if action_object.name == \"Door\":
			action_object.open()

func _physics_process(delta):

	if $MultiplayerSynchronizer.get_multiplayer_authority() == multiplayer.get_unique_id() || G.Players.is_empty():
		tempFloor = tempFloor2
		tempFloor2 = is_on_floor()
		
		if is_on_floor() && tempFloor == false && tempFloor2 == true:
			#print_debug(\"приземление\")
			if !$Audio/AudioWalk.playing:
				if $Audio/Timer.is_stopped():
					$Audio/Timer.start()
					$Audio/AudioWalk.play()
					
		
		
		if Input.is_action_just_pressed(\"ScreenShot\"):
			take_screenshot()
		
		var SPEED = 5.0
		const SPEED_UP = 2
		
		# Add the gravity.
		if not is_on_floor():
			velocity.y -= gravity * delta

		# Handle Jump.
		if Input.is_action_pressed(\"space\") and is_on_floor():
			velocity.y = JUMP_VELOCITY
		
		if Input.is_action_pressed(\"move_speed_up\"):
			SPEED *= SPEED_UP
		
		# Get the input direction and handle the movement/deceleration.
		# As good practice, you should replace UI actions with custom gameplay actions.
		var input_dir = Input.get_vector(\"move_left\", \"move_right\", \"move_up\", \"move_down\")
		var direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
		if direction:
			velocity.x = direction.x * SPEED
			velocity.z = direction.z * SPEED
			
			if is_on_floor():
				if !$Audio/AudioWalk.playing:
					if $Audio/Timer.is_stopped():
						$Audio/Timer.start()
						$Audio/AudioWalk.play()
			
		else:
			velocity.x = move_toward(velocity.x, 0, SPEED)
			velocity.z = move_toward(velocity.z, 0, SPEED)
		move_and_slide()



func _input(e):
	if $MultiplayerSynchronizer.get_multiplayer_authority() == multiplayer.get_unique_id() || G.Players.is_empty():
		if !G.pause:
			if e is InputEventMouseMotion:
				rot_x -= e.relative.y * G.Sensivity * G.FixSensivity
				rot_y = -e.relative.x * G.Sensivity * G.FixSensivity
				
				#transform.basis = Basis(Vector3(0,1,0), rot_y) * transform.basis
				transform.basis = transform.basis.rotated(Vector3(0,1,0), rot_y)
				
				if rot_x <= max_view && rot_x >= mix_view:
					$Head.transform.basis = Basis(Vector3(1,0,0), rot_x)

				if rot_x > max_view: rot_x = max_view
				elif rot_x < mix_view: rot_x = mix_view
				
			if e is InputEventMouse:
				if e.is_action_pressed(\"leftMouse\"):
					action()



func take_screenshot():
	$Audio/Screenshot.play()
	DirAccess.make_dir_absolute(\"screenshots\")
	
	var date = Time.get_date_string_from_system().replace(\".\",\"_\") 
	var time : String = Time.get_time_string_from_system().replace(\":\",\"\")
	var tick : String = str(Time.get_ticks_msec())
	var screenshot_path = \"./screenshots/\" + \"screenshot_\" + date+ \"_\" + time + \"_\" + tick + \".png\"
	
	print(\"screenshot saved: \" + screenshot_path)
	
	var image = get_viewport().get_texture().get_image()
	image.save_png(screenshot_path)
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_xbhj1"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_c12bp"]

[sub_resource type="PrismMesh" id="PrismMesh_wghmd"]

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_iw7wr"]
properties/0/path = NodePath(".:position")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath(".:rotation")
properties/1/spawn = true
properties/1/replication_mode = 1
properties/2/path = NodePath("Head:rotation")
properties/2/spawn = true
properties/2/replication_mode = 1

[node name="Player" type="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
script = SubResource("GDScript_n2jod")

[node name="BodyMeshInstance3D" type="MeshInstance3D" parent="."]
layers = 2
mesh = SubResource("CapsuleMesh_xbhj1")

[node name="BodyCollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_c12bp")

[node name="Head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.7, 0)

[node name="eyes" type="MeshInstance3D" parent="Head"]
transform = Transform3D(0.3, 0, 0, 0, -4.37114e-08, 0.1, 0, -1, -4.37114e-09, 0, 0.4, -0.5)
mesh = SubResource("PrismMesh_wghmd")
skeleton = NodePath("../..")

[node name="Camera3D" type="Camera3D" parent="Head"]

[node name="RayCast3D" type="RayCast3D" parent="Head"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0)
target_position = Vector3(0, 2, 0)

[node name="Audio" type="Node3D" parent="."]

[node name="Timer" type="Timer" parent="Audio"]
wait_time = 0.4
one_shot = true

[node name="AudioWalk" type="AudioStreamPlayer" parent="Audio"]

[node name="Screenshot" type="AudioStreamPlayer" parent="Audio"]

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_iw7wr")
